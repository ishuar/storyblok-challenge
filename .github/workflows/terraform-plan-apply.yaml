name: 'Terraform Plan and Apply workflow'

on:
  workflow_call:
    inputs:
      terraform_files_path:
        required: true
        description: Path to the terraform files to validate
        type: string
      terraform_log_level:
        required: false
        description: Terraform log level
        type: string
        default: 'INFO'
      terraform-plan-name:
        type: string
        required: false
        default: terraform.tfplan
        description: The terraform plan name used to create artifact and in apply job.
      terraform-version:
        type: string
        required: false
        default: 1.11.0
        description: The terraform version used for the github action.
      runner:
        type: string
        required: false
        default: ubuntu-latest
        description: The Github action runner OS , on which the action runs.
      cache-hash-file:
        type: string
        required: false
        default: '/providers.tf'
        description: The file used to create common hash cache naming.
      aws_region:
        type: string
        required: false
        default: eu-west-1
        description: The AWS region in which terraform resources should be deployed.
      aws_role_to_assume:
        type: string
        required: true
        description: The AWS role to assume for the terraform deployment.
      enable_apply_on_pr:
        type: boolean
        required: false
        default: false
        description: Enable terraform apply on pull request. This is not recommended for production environments.
      environment:
        type: string
        required: true
        description: The environment in which the terraform resources should be deployed.
env:
  # verbosity setting for Terraform logs
  TF_LOG: ${{ inputs.terraform_log_level }}
  TERRAFORM_PLAN_NAME: "{{ inputs.terraform-plan-name }}"
  ##! https://developer.hashicorp.com/terraform/cli/config/environment-variables
  TF_PLUGIN_CACHE_DIR: "${{ github.workspace }}/.terraform-plugin-cache"
  TF_IN_AUTOMATION: true
  TF_INPUT: false

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  ## ::Highlight:: Security
  codeScanning:
    name: IaC Scanning with tfsec Stage
    runs-on: "${{ inputs.runner }}"
    steps:
      - name: checkout the repository
        uses: actions/checkout@v4

      - name: tfsec pull request comment if found vulnerabilities
        if: ${{ github.event_name == 'pull_request' }}
        uses: aquasecurity/tfsec-pr-commenter-action@v1.3.1
        id: tfsec-pr-commenter
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tfsec_args: --config-file tfsec.yml
          working_directory: "${{ inputs.terraform_files_path }}"

      - name: IaC Security Scanning with tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        id: tfsec
        with:
          working_directory: "${{ inputs.terraform_files_path }}"
          additional_args: --config-file tfsec.yml
          soft_fail: false

  deploymentPLan:
    name: Terraform Plan Stage
    runs-on: ${{ inputs.runner }}
    needs: codeScanning
    outputs:
      exitCode: ${{ steps.plan.outputs.exitcode }}
    steps:
      - name: checkout the repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ inputs.terraform-version }}
      ## ::Highlight:: Security: Least Privilege Principle
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_role_to_assume }}
          aws-region: ${{ inputs.aws_region }}

      - uses: actions/cache@v3
        name: "Terraform cache"
        id: cache
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: ${{ runner.os }}-${{ inputs.terraform_files_path }}-${{ hashFiles(format('{0}/{1}', inputs.terraform_files_path , inputs.cache-hash-file)) }}

      - if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        name: Create TF_PLUGIN_CACHE_DIR
        shell: bash
        run: mkdir -p ${{ env.TF_PLUGIN_CACHE_DIR }}

      - name: Terraform init and plan
        shell: bash
        id: plan
        working-directory: "${{ github.workspace }}/${{ inputs.terraform_files_path}}"
        run: |
          terraform init
          terraform validate
          terraform plan -out "${{ inputs.terraform-plan-name }}" -detailed-exitcode

      ## Post Terraform plan as github comment.
      - name: Generate plain output
        run: terraform show -no-color terraform.plan > terraform.text

      - name: Generate JSON output
        run: terraform show -json terraform.plan > terraform.json
      - uses: ahmadnassri/action-terraform-report@v4
        with:
          # tell the action the plan outputs
          terraform-text: ${{ github.workspace }}/terraform.text
          terraform-json: ${{ github.workspace }}/terraform.json
          remove-stale-reports: true

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: "${{ inputs.terraform-plan-name }}"
          path: "${{ github.workspace }}/${{ inputs.terraform_files_path}}/${{ inputs.terraform-plan-name }}"

  deploymentApply:
    name: Terraform Apply Stage
    runs-on: ${{ inputs.runner }}
    needs: deploymentPLan
    ## if not cancelled and not failed and plan was created successfully
    ## only allowed on QA env on PR
    ## on Prod only from main branch
    if: ${{
        !cancelled() &&
        !failure() &&
        needs.deploymentPLan.outputs.exitCode == 2 &&
        (
          (github.event_name == 'pull_request' && inputs.environment == 'qa' && inputs.enable_apply_on_pr == true) ||
          (github.event_name == 'push' && github.ref == 'refs/heads/main' && inputs.environment == 'prod')
        )
      }}
    steps:
      - name: checkout the repository
        uses: actions/checkout@v3

        ## ::Highlight:: Security: Least Privilege Principle
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.aws_role_to_assume }}
          aws-region: ${{ inputs.aws_region }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.terraform-version }}

      - uses: actions/download-artifact@v3
        with:
          name: "${{ inputs.terraform-plan-name }}"
          path: "${{ github.workspace }}/${{ inputs.terraform_files_path}}"

      - uses: actions/cache@v3
        name: "Terraform cache"
        id: cache
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: ${{ runner.os }}-${{ inputs.terraform_files_path}}-${{ hashFiles(format('{0}/{1}', inputs.terraform_files_path, inputs.cache-hash-file)) }}

      ## ::Highlight::  Reliability & Security: Apply the plan which was reviewed
      - name: "Terraform Apply"
        shell: bash
        working-directory: "${{ github.workspace }}/${{ inputs.terraform_files_path}}"
        run: |
          terraform init
          terraform apply "${{ inputs.terraform-plan-name }}"
